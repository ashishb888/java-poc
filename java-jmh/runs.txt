RUN 1: RandomBenchmark

[user@host java-jmh]$ $JAVA_HOME/bin/java -cp . -Xms1G -Xmx1G  java-jmh-0.0.1-SNAPSHOT-jar-with-dependencies.jar
Error: Could not find or load main class java-jmh-0.0.1-SNAPSHOT-jar-with-dependencies.jar

----------

[user@host java-jmh]$ $JAVA_HOME/bin/java -cp . -Xms1G -Xmx1G  poc.java.service.MainService
# JMH version: 1.23
# VM version: JDK 1.8.0_191, Java HotSpot(TM) 64-Bit Server VM, 25.191-b12
# VM invoker: /opt/ngs/setups/jdk1.8.0_191/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 3 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: poc.java.service.RandomBenchmark.random

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 740.126 ±(99.9%) 288.609 ns/op
# Warmup Iteration   2: 841.160 ±(99.9%) 596.332 ns/op
# Warmup Iteration   3: 847.849 ±(99.9%) 658.613 ns/op
Iteration   1: ^C^L[user@host java-jmh]$
[user@host java-jmh]$ $JAVA_HOME/bin/java -cp . -Xms1G -Xmx1G  poc.java.service.MainService
# JMH version: 1.23
# VM version: JDK 1.8.0_191, Java HotSpot(TM) 64-Bit Server VM, 25.191-b12
# VM invoker: /opt/ngs/setups/jdk1.8.0_191/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 3 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: poc.java.service.RandomBenchmark.random

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 772.581 ±(99.9%) 466.766 ns/op
# Warmup Iteration   2: 833.687 ±(99.9%) 587.261 ns/op
# Warmup Iteration   3: 806.788 ±(99.9%) 564.344 ns/op
Iteration   1: 829.704 ±(99.9%) 624.865 ns/op
Iteration   2: 766.497 ±(99.9%) 427.560 ns/op
Iteration   3: 782.527 ±(99.9%) 520.148 ns/op


Result "poc.java.service.RandomBenchmark.random":
  792.910 ±(99.9%) 599.444 ns/op [Average]
  (min, avg, max) = (766.497, 792.910, 829.704), stdev = 32.858
  CI (99.9%): [193.466, 1392.353] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 1.8.0_191, Java HotSpot(TM) 64-Bit Server VM, 25.191-b12
# VM invoker: /opt/ngs/setups/jdk1.8.0_191/jre/bin/java
# VM options: -Xms1G -Xmx1G
# Warmup: 3 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: poc.java.service.RandomBenchmark.threadLocalRandom

# Run progress: 50.00% complete, ETA 00:00:30
# Fork: 1 of 1
# Warmup Iteration   1: 7.062 ±(99.9%) 0.181 ns/op
# Warmup Iteration   2: 7.427 ±(99.9%) 0.125 ns/op
# Warmup Iteration   3: 6.253 ±(99.9%) 0.050 ns/op
Iteration   1: 6.231 ±(99.9%) 0.029 ns/op
Iteration   2: 6.231 ±(99.9%) 0.025 ns/op
Iteration   3: 6.251 ±(99.9%) 0.063 ns/op


Result "poc.java.service.RandomBenchmark.threadLocalRandom":
  6.238 ±(99.9%) 0.214 ns/op [Average]
  (min, avg, max) = (6.231, 6.238, 6.251), stdev = 0.012
  CI (99.9%): [6.024, 6.452] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                          Mode  Cnt    Score     Error  Units
RandomBenchmark.random             avgt    3  792.910 ± 599.444  ns/op
RandomBenchmark.threadLocalRandom  avgt    3    6.238 ±   0.214  ns/op

----------==----------
